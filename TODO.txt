Gestire import/export del workspace
    [SJ]export=<folder path>
    [SJ]import=<file path>
    [SJ]delete=<file relative path>

charun deve prendere lo switch per diventare silente

Ricompila charun per osx e linux

verificare con jdk "vecchie" 1.7 >=

supporto a job exe e jar

finire integrazione bundle plugin e autostart doppio click

trasformare BasicConsoleLogger in statica singleton richiamabile da altre classi

revisionare commenti/TODO

eliminare codice morto inutile

avvio con doppio click

spiegazione generale progetto
    simile ad uber-jar ma...dinamico
    non ci sono dipendenze
    minimo payload
    multi platform
    autoconsistente
    aggiornabile

se interessante, a fini di prestazioni, possibilità di rendere la temp folder persistente

check con file nel workspace grossi
--------
Il job deve dare per scontato di trovarsi dentro il path del selfjar (quindi dovrebbe ricavarsi il path del workspace in autonomia)
    ogni job installato deve far conto di scrivere i dati permanenti nel workspace
    per il resto è libero di fare quel che vuole

rivedere aggiornamento context e passaggio parametri come da test

i test non possono funzionare se il jar non è ancora stato creato (IOException)
gli unit test non sopportano la concorrenza

ogni job deve essere pacchettizzato in uno zip
l'installazione viene fatta con i parametri
    [SJ]install=<path zip>
    [SJ]main=<executable filename>
    [SJ]install=CLEAN
l'installazione viene annotata nel contesto

Il selfjar estrae il job e lo avvia con i parametri

run dopo aver installato

Gestire il passaggio parametri
    da prompt a selfjar
        [SJ]<key>=<value>
        tutti quelli che non cominciano per [SJ] sono passati al job così come sono

nel contesto è possibile creare delle variabili di ambiente/parametri da passare sempre al job in avvio
    [SJ]addvar=<env variable>
    [SJ]delvar=<env variable>
    [SJ]addpar=<parameter>
    [SJ]delpar=<parameter>
